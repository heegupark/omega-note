{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useDrag, useDragLayer } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { BsBook } from 'react-icons/bs';\nconst layerStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 9999,\n  left: 0,\n  top: 0,\n  // width: '100%',\n  height: '100%'\n};\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    margin: 'auto',\n    color: 'rgb(51,51,51)',\n    fontSize: '16px',\n    width: '100%'\n  },\n  title: {\n    padding: '10px',\n    fontSize: '22px'\n  },\n  box: {\n    height: '100px',\n    cursor: 'pointer',\n    display: 'flex',\n    border: '1px groove rgb(0,0,0,0)',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    wordWrap: 'break-word',\n    padding: '15px'\n  },\n  boxSelected: {\n    height: '100px',\n    cursor: 'pointer',\n    display: 'flex',\n    border: '1px groove blue',\n    borderRadius: '5px',\n    backgroundColor: 'white',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    wordWrap: 'break-word',\n    padding: '15px'\n  },\n  previewIcon: {\n    marginRight: '3px',\n    verticalAlign: 'middle'\n  },\n  previewItem: {\n    marginLeft: '3px'\n  },\n  preview: {\n    border: '1px solid rgb(186,223,229)',\n    borderRadius: '3px',\n    // width: '150px',\n    overflow: 'hidden',\n    fontSize: '14px',\n    backgroundColor: 'rgb(248,248,248,0.6)',\n    padding: '10px'\n  },\n  noteTitle: {\n    color: 'rgb(61,61,61)',\n    fontSize: '14px'\n  },\n  noteContent: {\n    fontSize: '12px',\n    color: 'rgb(115,115,115)',\n    overflow: 'hidden',\n    height: '35px'\n  },\n  date: {\n    fontSize: '11px',\n    color: 'rgb(115,115,115)'\n  },\n  empty: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 'auto',\n    textAlign: 'center',\n    padding: '35px'\n  },\n  emptyIcon: {\n    fontSize: '75px'\n  },\n  newNoteText: {\n    cursor: 'pointer',\n    color: 'rgb(0,168,45)'\n  },\n  dot: {\n    float: 'right',\n    cursor: 'pointer'\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    backgroundColor: 'rgb(222, 222, 222)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(1, 2, 2),\n    textAlign: 'center',\n    width: '350px',\n    borderRadius: '5px',\n    fontSize: '12px',\n    outline: 'none'\n  },\n  button: {\n    height: '30px',\n    margin: '10px 15px'\n  }\n}));\nexport default function NoteListItem(props) {\n  const {\n    0: showDotMenu,\n    1: setShowDotMenu\n  } = useState(false);\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [modalOpen, setModalOpen] = React.useState(false);\n\n  const handleModalOpen = () => {\n    handlePopoverClose();\n    setModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const handlePopoverOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [{\n    opacity\n  }, drag, preview] = useDrag({\n    item: {\n      type: props.note.noteTitle\n    },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0.4 : 1,\n      isDragging: monitor.isDragging()\n    })\n  });\n  useEffect(() => {\n    preview(getEmptyImage(), {\n      captureDraggingState: true\n    });\n  }, []);\n\n  const getItemStyles = (initialOffset, currentOffset, isSnapToGrid) => {\n    if (!initialOffset || !currentOffset) {\n      return {\n        display: 'none'\n      };\n    }\n\n    let {\n      x,\n      y\n    } = currentOffset;\n\n    if (isSnapToGrid) {\n      x -= initialOffset.x;\n      y -= initialOffset.y; // [x, y] = snapToGrid(x, y);\n\n      x += initialOffset.x;\n      y += initialOffset.y;\n    }\n\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n      transform,\n      WebkitTransform: transform\n    };\n  };\n\n  const {\n    itemType,\n    isDragging,\n    item,\n    initialOffset,\n    currentOffset\n  } = useDragLayer(monitor => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n  }));\n\n  const convertToString = string => {\n    const limit = 30;\n    const convertedString = string.replace(/(<([^>]+)>)/gi, '');\n    return `${convertedString.substring(0, limit)}${convertedString.length > limit ? '...' : ''}`;\n  };\n\n  const isSelected = props.note.id === props.currentNoteId;\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: isSelected ? classes.boxSelected : classes.box,\n    onClick: () => props.setCurrentNoteId(props.note.id),\n    onMouseEnter: () => {\n      setShowDotMenu(true);\n    },\n    onMouseLeave: () => {\n      setShowDotMenu(false);\n    }\n  }, props.note.isDeleted ? __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.noteTitle\n  }, props.convertTitle(props.note.noteTitle, 20)), __jsx(\"div\", {\n    className: classes.noteContent\n  }, convertToString(props.note.note)), __jsx(\"div\", {\n    className: classes.date\n  }, props.formatDate(props.note.updatedAt))) : __jsx(\"div\", {\n    ref: drag,\n    style: {\n      opacity\n    }\n  }, __jsx(\"div\", {\n    className: classes.noteTitle\n  }, props.convertTitle(props.note.noteTitle, 20)), __jsx(\"div\", {\n    className: classes.noteContent\n  }, convertToString(props.note.note)), __jsx(\"div\", {\n    className: classes.date\n  }, props.formatDate(props.note.updatedAt)))), __jsx(\"div\", {\n    style: layerStyles\n  }, __jsx(\"div\", {\n    style: getItemStyles(initialOffset, currentOffset, false)\n  }, __jsx(\"div\", {\n    className: classes.preview\n  }, __jsx(\"span\", {\n    className: classes.previewIcon\n  }, __jsx(BsBook, null)), __jsx(\"span\", {\n    className: classes.previewItem\n  }, itemType)))));\n}","map":null,"metadata":{},"sourceType":"module"}