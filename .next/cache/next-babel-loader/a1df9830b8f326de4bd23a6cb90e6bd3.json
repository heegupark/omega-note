{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { CgNotes } from 'react-icons/cg';\nimport Divider from '@material-ui/core/Divider';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%'\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px'\n    },\n    list: {\n      height: '100px',\n      cursor: 'pointer'\n    },\n    listDragging: {\n      height: '100px',\n      border: '2px groove rgb(0,119,179)',\n      borderRadius: '5px'\n    },\n    content: {\n      padding: '20px',\n      height: '100px'\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px'\n    },\n    emptyIcon: {\n      fontSize: '75px'\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)'\n    }\n  });\n});\nexport default function NoteList(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var handleDragToggle = function handleDragToggle(noteId, note) {\n    var newNote = _objectSpread(_objectSpread({}, note), {}, {\n      dragging: !note.dragging\n    });\n\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"title\"), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), props.notebooks[props.notebook].notes.length > 0 ? __jsx(React.Fragment, null, props.notebooks[props.notebook].notes.map(function (note) {\n    return __jsx(\"div\", {\n      key: note.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, note.dragging ? __jsx(\"div\", {\n      onDragEnd: function onDragEnd() {\n        return handleDragToggle(note.id, note);\n      },\n      className: classes.listDragging,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: classes.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, note.noteTitle)) : __jsx(\"div\", {\n      onDragStart: function onDragStart() {\n        return handleDragToggle(note.id, note);\n      },\n      className: classes.list,\n      draggable: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: classes.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, note.noteTitle)), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }));\n  })) : __jsx(\"div\", {\n    className: classes.empty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.emptyIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, __jsx(CgNotes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"It all begins with notes\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Click the\", ' ', __jsx(\"span\", {\n    onClick: function onClick() {\n      return props.addNewNote();\n    },\n    className: classes.newNoteText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"+ New Note\"), ' ', \"button in the side bar to create note.\")));\n}\n\n_s(NoteList, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = NoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteList\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list.tsx"],"names":["React","createStyles","makeStyles","CgNotes","Divider","useStyles","theme","root","display","flexDirection","height","margin","color","fontSize","width","title","padding","list","cursor","listDragging","border","borderRadius","content","empty","alignItems","justifyContent","textAlign","emptyIcon","newNoteText","NoteList","props","classes","handleDragToggle","noteId","note","newNote","dragging","updateNote","notebook","notebooks","notes","length","map","id","noteTitle","addNewNote"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CgNotes } from 'react-icons/cg';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%',\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px',\n    },\n    list: {\n      height: '100px',\n      cursor: 'pointer',\n    },\n    listDragging: {\n      height: '100px',\n      border: '2px groove rgb(0,119,179)',\n      borderRadius: '5px',\n    },\n    content: {\n      padding: '20px',\n      height: '100px',\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px',\n    },\n    emptyIcon: {\n      fontSize: '75px',\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)',\n    },\n  })\n);\nexport default function NoteList(props: any) {\n  const classes = useStyles();\n\n  const handleDragToggle = (noteId: string, note: any) => {\n    const newNote = {\n      ...note,\n      dragging: !note.dragging,\n    };\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.title}>title</div>\n      <Divider />\n      {props.notebooks[props.notebook].notes.length > 0 ? (\n        <>\n          {props.notebooks[props.notebook].notes.map((note: any) => {\n            return (\n              <div key={note.id}>\n                {note.dragging ? (\n                  <div\n                    onDragEnd={() => handleDragToggle(note.id, note)}\n                    className={classes.listDragging}\n                  >\n                    <div className={classes.content}>{note.noteTitle}</div>\n                  </div>\n                ) : (\n                  <div\n                    onDragStart={() => handleDragToggle(note.id, note)}\n                    className={classes.list}\n                    draggable\n                  >\n                    <div className={classes.content}>{note.noteTitle}</div>\n                  </div>\n                )}\n                <Divider />\n              </div>\n            );\n          })}\n        </>\n      ) : (\n        <div className={classes.empty}>\n          <div className={classes.emptyIcon}>\n            <CgNotes />\n          </div>\n          <div>It all begins with notes</div>\n          <div>\n            Click the{' '}\n            <span\n              onClick={() => props.addNewNote()}\n              className={classes.newNoteText}\n            >\n              + New Note\n            </span>{' '}\n            button in the side bar to create note.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}