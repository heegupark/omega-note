{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\nimport NoteRoundedIcon from '@material-ui/icons/NoteRounded';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\nimport SideBarItem from './sidebar-item';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { useDrop } from 'react-dnd';\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => createStyles({\n  paper: {\n    padding: '5px'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap'\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    backgroundColor: 'rgb(26,26,26)',\n    color: 'rgb(165,165,165)',\n    padding: '5px'\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(7) + 1\n    },\n    backgroundColor: 'rgb(26,26,26)',\n    padding: '5px 0px'\n  },\n  toolbar: _objectSpread({\n    position: 'absolute',\n    bottom: '0',\n    right: '0',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar),\n  folder: {\n    padding: '0px 10px',\n    '&:hover': {\n      backgroundColor: 'rgb(51,51,51)',\n      borderRadius: '3px'\n    }\n  },\n  folderSelected: {\n    padding: '0px 10px',\n    backgroundColor: 'rgb(64,64,64)',\n    borderRadius: '3px',\n    '&:hover': {\n      backgroundColor: 'rgb(51,51,51)',\n      borderRadius: '3px'\n    }\n  },\n  listSelected: {\n    backgroundColor: 'rgb(64,64,64)',\n    borderRadius: '3px',\n    '&:hover': {\n      backgroundColor: 'rgb(51,51,51)',\n      borderRadius: '3px'\n    }\n  },\n  list: {\n    '&:hover': {\n      backgroundColor: 'rgb(51,51,51)',\n      borderRadius: '3px'\n    }\n  },\n  icon: {\n    minWidth: '40px',\n    color: 'rgb(165,165,165)'\n  },\n  iconMinimized: {\n    minWidth: '25px',\n    color: 'rgb(165,165,165)'\n  },\n  addNoteIcon: {\n    color: 'white'\n  },\n  addNotebookIcon: {\n    color: 'rgb(75,165,65)',\n    marginLeft: '30px'\n  },\n  addNote: {\n    backgroundColor: 'rgb(0,168,45)',\n    color: 'white',\n    borderRadius: '50px',\n    '&:hover': {\n      backgroundColor: 'rgb(0,143,38)'\n    },\n    padding: '8px',\n    margin: 'auto',\n    height: '40px'\n  },\n  newnotebook: {\n    width: '70%',\n    padding: '10px 0px',\n    height: '30px',\n    margin: '1px 0px',\n    outline: 'none',\n    color: 'rgb(165, 165, 165)',\n    border: 'none',\n    borderBottom: '1px solid rgb(165, 165, 165)',\n    backgroundColor: 'transparent',\n    fontWeight: 400,\n    fontSize: '1rem'\n  },\n  menuNotebookIcon: {\n    color: 'rgb(51,51,51)',\n    marginLeft: '30px'\n  }\n}));\nexport default function Sidebar(props) {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(true);\n  const {\n    0: addNotebookButton,\n    1: setAddNotebookButton\n  } = useState(false);\n  const {\n    0: addNotebook,\n    1: setAddNotebook\n  } = useState(false);\n  const {\n    0: newNotebook,\n    1: setNewNotebook\n  } = useState('');\n\n  const handleDrawerToggle = () => {\n    setOpen(!open);\n  };\n\n  const addNewNotebook = () => {\n    setOpen(true);\n    setAddNotebook(true);\n  };\n\n  const handleAddNewNotebook = e => {\n    if (e.key === 'Enter' && newNotebook.length > 0) {\n      props.addNewNotebook('', newNotebook);\n      setAddNotebook(false);\n      setNewNotebook('');\n    }\n  };\n\n  const [{\n    isOver,\n    item\n  }, drop] = useDrop({\n    accept: 'note',\n    drop: () => moveToTrash(),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      item: monitor.getItem()\n    })\n  });\n\n  const moveToTrash = () => {\n    props.moveNote(item === null || item === void 0 ? void 0 : item.notebook, 'trash', item === null || item === void 0 ? void 0 : item.id);\n  };\n\n  return __jsx(Drawer, {\n    variant: \"permanent\",\n    className: clsx(classes.drawer, {\n      [classes.drawerOpen]: open,\n      [classes.drawerClose]: !open\n    }),\n    classes: {\n      paper: clsx({\n        [classes.drawerOpen]: open,\n        [classes.drawerClose]: !open\n      })\n    }\n  }, __jsx(List, null, __jsx(ListItem, {\n    key: \"o-note\"\n  }, __jsx(ListItemIcon, null, __jsx(\"img\", {\n    src: \"../../static/images/o-logo.png\",\n    style: {\n      width: '22px'\n    }\n  })), __jsx(ListItemText, {\n    primary: \"o-note\"\n  }))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"add-note\",\n    disabled: props.notebook === 'trash',\n    className: classes.addNote,\n    style: {\n      width: open ? '85%' : '70%'\n    },\n    onClick: () => {\n      if (props.notebook) {\n        props.addNewNote('', '');\n      } else {\n        addNewNotebook();\n      }\n    }\n  }, __jsx(ListItemIcon, {\n    style: {\n      minWidth: '35px'\n    }\n  }, __jsx(Tooltip, {\n    title: \"Click to add a note\",\n    arrow: true\n  }, __jsx(AddIcon, {\n    className: classes.addNoteIcon\n  }))), __jsx(Tooltip, {\n    title: \"Click to add a notebook\",\n    arrow: true\n  }, props.notebook ? __jsx(ListItemText, {\n    primary: open ? 'New Note' : ''\n  }) : __jsx(ListItemText, {\n    primary: open ? 'New Notebook' : ''\n  })))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"Notebooks\",\n    className: props.notebook === '' ? classes.folderSelected : classes.folder,\n    style: {\n      padding: open ? '0px 10px' : '0px 15px'\n    }\n  }, __jsx(ListItemIcon, null, __jsx(NoteRoundedIcon, {\n    className: open ? classes.icon : classes.iconMinimized,\n    onClick: () => {\n      props.handleNotebookClick('');\n      props.setView('notebooks');\n    }\n  })), __jsx(ListItemText, {\n    primary: \"Notebooks\",\n    onClick: () => {\n      props.handleNotebookClick('');\n      props.setView('notebooks');\n    }\n  }), __jsx(ListItemIcon, {\n    onClick: () => {\n      addNewNotebook();\n    },\n    onMouseOver: () => setAddNotebookButton(true),\n    onMouseLeave: () => setAddNotebookButton(false)\n  }, addNotebookButton && open ? __jsx(AddIcon, {\n    className: classes.addNotebookIcon\n  }) : __jsx(MoreHorizIcon, {\n    className: classes.menuNotebookIcon\n  }))), props.notebookOrder.length > 0 ? props.notebookOrder.map(notebook => {\n    return __jsx(SideBarItem, _extends({\n      key: notebook\n    }, props, {\n      thisNotebook: notebook,\n      open: open\n    }));\n  }) : '', addNotebook && __jsx(ListItem, {\n    style: {\n      padding: open ? '0px 0px 0px 30px' : '0px 15px'\n    }\n  }, __jsx(ListItemIcon, null, __jsx(ImportContactsIcon, {\n    className: open ? classes.icon : classes.iconMinimized\n  })), __jsx(\"input\", {\n    autoFocus: true,\n    value: newNotebook,\n    placeholder: \"New Notebook\",\n    className: classes.newnotebook,\n    onChange: e => setNewNotebook(e.target.value),\n    onKeyDown: e => {\n      handleAddNewNotebook(e);\n    },\n    onBlur: () => setAddNotebook(false)\n  }))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"Trash\",\n    className: props.notebook === 'trash' ? classes.folderSelected : classes.folder,\n    onClick: () => props.handleNotebookClick('trash'),\n    style: {\n      padding: open ? '0px 10px' : '0px 15px',\n      backgroundColor: isOver ? 'green' : '',\n      borderRadius: isOver ? '5px' : ''\n    },\n    ref: drop\n  }, __jsx(ListItemIcon, null, __jsx(DeleteOutlineRoundedIcon, {\n    className: open ? classes.icon : classes.iconMinimized\n  })), __jsx(ListItemText, {\n    primary: \"Trash\"\n  }))), __jsx(\"div\", {\n    className: classes.toolbar\n  }, __jsx(IconButton, {\n    onClick: handleDrawerToggle,\n    className: classes.icon\n  }, open ? __jsx(Tooltip, {\n    title: \"Click to close\",\n    arrow: true\n  }, __jsx(ChevronLeftIcon, null)) : __jsx(Tooltip, {\n    title: \"Click to open\",\n    arrow: true\n  }, __jsx(ChevronRightIcon, null)))));\n}","map":null,"metadata":{},"sourceType":"module"}