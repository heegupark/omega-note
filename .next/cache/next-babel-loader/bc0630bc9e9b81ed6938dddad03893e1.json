{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react'; // import Disclaimer from './disclaimer';\n\nimport Sidebar from './sidebar';\nimport Note from './note';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { v4 as uuidv4 } from 'uuid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Moment from 'react-moment';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Notebooks from './notebooks';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex'\n  }\n}));\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nexport default function Main() {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: view,\n    1: setView\n  } = useState('note');\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: severity,\n    1: setSeverity\n  } = useState('success');\n  const {\n    0: notebook,\n    1: setNotebook\n  } = useState('notebook-0');\n  const {\n    0: currentNoteId,\n    1: setCurrentNoteId\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    notebooks: {\n      'notebook-0': {\n        id: 'notebook-0',\n        title: 'Work',\n        notes: [{\n          id: 'note-00',\n          noteTitle: 'Tech interview',\n          note: '<p>I need to prepare interview!</p>',\n          isDeleted: false,\n          lastNotebook: '',\n          lastNotebookTitle: '',\n          createdAt: new Date(2020, 8, 10),\n          updatedAt: new Date(2020, 8, 10)\n        }, {\n          id: 'note-01',\n          noteTitle: 'Meet up',\n          note: '<p>Fun meet up!</p>',\n          isDeleted: false,\n          lastNotebook: '',\n          lastNotebookTitle: '',\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'notebook-1': {\n        id: 'notebook-1',\n        title: 'Personal',\n        notes: [{\n          id: 'note-10',\n          noteTitle: 'Pay Utilities',\n          note: '<p>I need to pay gas today!</p>',\n          isDeleted: false,\n          lastNotebook: '',\n          lastNotebookTitle: '',\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      trash: {\n        id: 'trash',\n        title: 'Trash',\n        notes: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    },\n    notebookOrder: ['notebook-0', 'notebook-1']\n  });\n  useEffect(() => {\n    setCurrentNoteIdByNotebook(notebook);\n  }, []);\n\n  const addNewNote = (title, note) => {\n    const newNote = {\n      id: uuidv4(),\n      noteTitle: title ? title : 'Untitled',\n      note: note ? note : '',\n      dragging: false,\n      isDeleted: false,\n      lastNotebook: '',\n      lastNotebookTitle: '',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    state.notebooks[notebook].notes.unshift(newNote);\n    updateDate(notebook, undefined);\n    setCurrentNoteIdByNotebook(notebook);\n    handleSnackbar(`A note is created`, 'info');\n    setState(_objectSpread({}, state));\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const updateNote = (notebookId, noteId, newNote) => {\n    state.notebooks[notebookId].notes.map(note => {\n      if (note.id === noteId && (newNote.note && newNote.note !== note.note || newNote.noteTitle && newNote.noteTitle !== note.noteTitle)) {\n        note.noteTitle = newNote.noteTitle ? newNote.noteTitle : note.noteTitle;\n        note.note = newNote.note ? newNote.note : note.note; // note.isDeleted = newNote.isDeleted;\n\n        note.updatedAt = new Date();\n      }\n    });\n    state.notebooks[notebookId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (notebookId, noteId) => {\n    if (noteId) {\n      state.notebooks[notebookId].notes.map(note => {\n        if (note.id === noteId) {\n          note.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.notebooks[notebookId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const moveNote = (origin, destination, noteId) => {\n    let tempNote = {};\n    state.notebooks[origin].notes.map((note, index) => {\n      if (note.id === noteId) {\n        if (destination === 'trash') {\n          note.isDeleted = true;\n          note.lastNotebook = origin;\n        } else {\n          note.isDeleted = false;\n        }\n\n        tempNote = note;\n        state.notebooks[origin].notes.splice(index, 1);\n      }\n    });\n    let newId = '';\n\n    if (!state.notebooks[destination]) {\n      addNewNotebook(tempNote.lastNotebook, tempNote.lastNotebookTitle);\n      newId = tempNote.lastNotebook;\n    } else {\n      newId = destination;\n    }\n\n    console.log(newId);\n    state.notebooks[newId].notes.push(tempNote);\n    state.notebooks[newId].updatedAt = new Date();\n    handleNotebookClick(origin);\n    updateDate(origin, noteId);\n\n    if (origin === 'trash') {\n      handleSnackbar(`A note is restored to ${state.notebooks[newId].title}`, 'success');\n    } else if (destination === 'trash') {\n      handleSnackbar(`A note is moved to ${state.notebooks[newId].title}`, 'warning');\n    } else {\n      handleSnackbar(`A note is moved to ${state.notebooks[newId].title}`, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteNote = (notebookId, noteId) => {\n    state.notebooks[notebookId].notes.filter((note, index) => {\n      if (note.id === noteId) {\n        state.notebooks[notebookId].notes.splice(index, 1);\n      }\n    });\n    state.notebooks[notebookId].updatedAt = new Date();\n    setCurrentNoteIdByNotebook(notebookId);\n    updateDate(notebookId, noteId);\n    handleSnackbar(`A note is permanently deleted`, 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const formatDate = date => {\n    const createdTime = new Date(date).valueOf();\n    const currentTime = new Date().valueOf();\n    let diff = (currentTime - createdTime) / 1000;\n\n    if (diff <= 86400) {\n      return __jsx(Moment, {\n        fromNow: true,\n        date: date\n      });\n    } else if (diff <= 172800) {\n      return __jsx(\"div\", null, \"Yesterday\");\n    } else {\n      return __jsx(Moment, {\n        format: \"MMM D, YYYY\",\n        date: new Date(date)\n      });\n    }\n  };\n\n  const handleSnackbar = (message, severity) => {\n    setMessage(message);\n    setSeverity(severity);\n    setOpen(true);\n  };\n\n  const handleNotebookClick = notebookId => {\n    setView('note');\n    setNotebook(notebookId);\n    setCurrentNoteIdByNotebook(notebookId);\n  };\n\n  const setCurrentNoteIdByNotebook = notebookId => {\n    if (notebookId) {\n      setCurrentNoteId(state.notebooks[notebookId].notes.length > 0 ? state.notebooks[notebookId].notes[0].id : undefined);\n    }\n  };\n\n  const addNewNotebook = (_id, title) => {\n    const id = _id || uuidv4();\n\n    const newNotbook = {\n      id,\n      title,\n      notes: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    state.notebooks[id] = newNotbook;\n    state.notebookOrder.push(id);\n    handleNotebookClick(id);\n    handleSnackbar(`Successfully created '${title}'`, 'success');\n    setState(_objectSpread({}, state));\n  };\n\n  const removeNotebook = id => {\n    const title = state.notebooks[id].title;\n    state.notebooks[id].notes.map(note => {\n      let tempNote = {};\n      note.isDeleted = true;\n      note.lastNotebook = id;\n      note.lastNotebookTitle = title;\n      tempNote = note;\n      state.notebooks['trash'].notes.push(tempNote);\n      state.notebooks['trash'].updatedAt = new Date();\n    });\n    delete state.notebooks[id];\n    state.notebookOrder.splice(state.notebookOrder.indexOf(id), 1);\n    const nextNotebook = state.notebookOrder.length > 0 ? state.notebookOrder[0] : '';\n\n    if (nextNotebook) {\n      setNotebook(nextNotebook);\n      setCurrentNoteIdByNotebook(nextNotebook);\n    } else {\n      setNotebook('');\n      setCurrentNoteIdByNotebook('');\n    }\n\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(CssBaseline, null), __jsx(DndProvider, {\n    backend: HTML5Backend\n  }, __jsx(Sidebar, {\n    notebooks: state.notebooks,\n    notebookOrder: state.notebookOrder,\n    notebook: notebook,\n    addNewNote: addNewNote,\n    setNotebook: setNotebook,\n    setCurrentNoteId: setCurrentNoteId,\n    handleNotebookClick: handleNotebookClick,\n    addNewNotebook: addNewNotebook,\n    removeNotebook: removeNotebook,\n    moveNote: moveNote,\n    setView: setView\n  }), view === 'notebooks' ? __jsx(Notebooks, {\n    notebooks: state.notebooks,\n    notebookOrder: state.notebookOrder,\n    handleNotebookClick: handleNotebookClick\n  }) : __jsx(Note, {\n    notebooks: state.notebooks,\n    notebookOrder: state.notebookOrder,\n    notebook: notebook,\n    addNewNote: addNewNote,\n    open: open,\n    updateNote: updateNote,\n    currentNoteId: currentNoteId,\n    setCurrentNoteId: setCurrentNoteId,\n    formatDate: formatDate,\n    moveNote: moveNote,\n    handleSnackbar: handleSnackbar,\n    deleteNote: deleteNote\n  })), __jsx(Snackbar, {\n    open: open,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 1000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: severity\n  }, message)));\n}","map":null,"metadata":{},"sourceType":"module"}