{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list-item.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useDrag, useDragLayer } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    margin: 'auto',\n    color: 'rgb(51,51,51)',\n    fontSize: '16px',\n    width: '100%'\n  },\n  title: {\n    padding: '10px',\n    fontSize: '22px'\n  },\n  box: {\n    position: 'sticky',\n    height: '100px',\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  noteTitle: {\n    padding: '10px 20px 0px 20px',\n    color: 'rgb(61,61,61)'\n  },\n  noteContent: {\n    padding: '5px 20px',\n    fontSize: '14px',\n    color: 'rgb(115,115,115)'\n  },\n  empty: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 'auto',\n    textAlign: 'center',\n    padding: '35px'\n  },\n  emptyIcon: {\n    fontSize: '75px'\n  },\n  newNoteText: {\n    cursor: 'pointer',\n    color: 'rgb(0,168,45)'\n  }\n}));\n\nconst getItemStyles = (initialOffset, currentOffset, isSnapToGrid) => {\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none'\n    };\n  }\n\n  let {\n    x,\n    y\n  } = currentOffset;\n\n  if (isSnapToGrid) {\n    x -= initialOffset.x;\n    y -= initialOffset.y; // [x, y] = snapToGrid(x, y);\n\n    x += initialOffset.x;\n    y += initialOffset.y;\n  }\n\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform\n  };\n};\n\nexport default function NoteListItem(props) {\n  const classes = useStyles();\n  const [{\n    opacity\n  }, drag, preview] = useDrag({\n    item: {\n      type: props.noteTitle\n    },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0.4 : 1,\n      isDragging: monitor.isDragging()\n    })\n  });\n  useEffect(() => {\n    preview(getEmptyImage(), {\n      captureDraggingState: true\n    });\n  }, []);\n  const {\n    itemType,\n    isDragging,\n    item,\n    initialOffset,\n    currentOffset\n  } = useDragLayer(monitor => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging()\n  }));\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    ref: drag,\n    style: {\n      opacity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.noteTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, props.noteTitle), __jsx(\"div\", {\n    className: classes.noteContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, props.note))), __jsx(\"div\", {\n    style: {\n      position: 'fixed',\n      display: isDragging ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, props.noteTitle));\n}","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list-item.tsx"],"names":["React","useEffect","createStyles","makeStyles","useDrag","useDragLayer","getEmptyImage","useStyles","theme","root","display","flexDirection","height","margin","color","fontSize","width","title","padding","box","position","cursor","noteTitle","noteContent","empty","alignItems","justifyContent","textAlign","emptyIcon","newNoteText","getItemStyles","initialOffset","currentOffset","isSnapToGrid","x","y","transform","WebkitTransform","NoteListItem","props","classes","opacity","drag","preview","item","type","collect","monitor","isDragging","captureDraggingState","itemType","getItem","getItemType","getInitialSourceClientOffset","getSourceClientOffset","note"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { XYCoord, useDrag, useDragLayer, DragSourceMonitor } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%',\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px',\n    },\n    box: {\n      position: 'sticky',\n      height: '100px',\n      cursor: 'pointer',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    noteTitle: {\n      padding: '10px 20px 0px 20px',\n      color: 'rgb(61,61,61)',\n    },\n    noteContent: {\n      padding: '5px 20px',\n      fontSize: '14px',\n      color: 'rgb(115,115,115)',\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px',\n    },\n    emptyIcon: {\n      fontSize: '75px',\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)',\n    },\n  })\n);\n\nconst getItemStyles = (\n  initialOffset: XYCoord | null,\n  currentOffset: XYCoord | null,\n  isSnapToGrid: boolean\n) => {\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    };\n  }\n\n  let { x, y } = currentOffset;\n\n  if (isSnapToGrid) {\n    x -= initialOffset.x;\n    y -= initialOffset.y;\n    // [x, y] = snapToGrid(x, y);\n    x += initialOffset.x;\n    y += initialOffset.y;\n  }\n\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform,\n  };\n};\n\nexport default function NoteListItem(props: any) {\n  const classes = useStyles();\n\n  const [{ opacity }, drag, preview] = useDrag({\n    item: { type: props.noteTitle },\n    collect: (monitor: DragSourceMonitor) => ({\n      opacity: monitor.isDragging() ? 0.4 : 1,\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, []);\n\n  const {\n    itemType,\n    isDragging,\n    item,\n    initialOffset,\n    currentOffset,\n  } = useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  return (\n    <>\n      <div className={classes.box}>\n        <div ref={drag} style={{ opacity }}>\n          <div className={classes.noteTitle}>{props.noteTitle}</div>\n          <div className={classes.noteContent}>{props.note}</div>\n        </div>\n      </div>\n      <div\n        style={{ position: 'fixed', display: isDragging ? 'block' : 'none' }}\n      >\n        {props.noteTitle}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}