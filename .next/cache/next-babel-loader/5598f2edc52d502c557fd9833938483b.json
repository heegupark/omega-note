{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/notebooks.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n    flexDdirection: 'row',\n    height: '100vh',\n    width: '100%',\n    margin: 'auto'\n  },\n  box: {\n    height: '90%',\n    width: '100%',\n    margin: 'auto',\n    color: 'rgb(51,51,51)',\n    fontSize: '14px'\n  }\n}));\nexport default function Notebooks(props) {\n  const classes = useStyles();\n\n  const getTimeMsg = date => {\n    const createdTime = new Date(date).valueOf();\n    const currentTime = new Date().valueOf();\n    const second = 60;\n    const minute = 60;\n    const hour = 24;\n    const day = 30;\n    const month = 12;\n    let divider = 1;\n    let timeMsg = '';\n    let diff = (currentTime - createdTime) / 1000;\n\n    if (diff <= second) {\n      timeMsg = 'second';\n    } else if (diff <= second * minute) {\n      divider = second;\n      timeMsg = 'minute';\n    } else if (diff <= second * minute * hour) {\n      divider = second * minute;\n      timeMsg = 'hour';\n    } else if (diff <= 172800) {\n      return 'Yesterday';\n    } else {\n      return `${date.getMonth()} ${date.getDate()}, ${date.getFullYear()}`;\n    }\n\n    diff /= divider;\n    const displayTime = Math.abs(Math.round(diff));\n    const plural = displayTime > 1 ? 's' : '';\n    const timeMessage = `${displayTime} ${timeMsg}${plural} ago`;\n    return timeMessage;\n  };\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'title',\n    headerName: 'Title',\n    width: 250\n  }, {\n    field: 'createdAt',\n    headerName: 'Created Date',\n    width: 300\n  }, {\n    field: 'updatedAt',\n    headerName: 'Updated Date',\n    width: 300\n  }]; // const rows: Array = [];\n\n  const rows = props.notebookOrder.map((notebook, index) => {\n    return {\n      id: index,\n      title: props.notebooks[notebook].title,\n      createdAt: getTimeMsg(props.notebooks[notebook].createdAt),\n      updatedAt: getTimeMsg(props.notebooks[notebook].updatedAt)\n    }; // row.push(row);\n  }); // [\n  //   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  //   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  //   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  //   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  //   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  //   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  //   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  //   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  //   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  // ];\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(DataGrid, {\n    className: classes.box,\n    rows: rows,\n    columns: columns,\n    pageSize: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/notebooks.tsx"],"names":["React","DataGrid","createStyles","makeStyles","useStyles","theme","root","display","alignItems","justifyItems","flexDdirection","height","width","margin","box","color","fontSize","Notebooks","props","classes","getTimeMsg","date","createdTime","Date","valueOf","currentTime","second","minute","hour","day","month","divider","timeMsg","diff","getMonth","getDate","getFullYear","displayTime","Math","abs","round","plural","timeMessage","columns","field","headerName","rows","notebookOrder","map","notebook","index","id","title","notebooks","createdAt","updatedAt"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAoD,wBAApD;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAgD,0BAAhD;AAGA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,IAC3BH,YAAY,CAAC;AACXI,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,UAAU,EAAE,QAFR;AAGJC,IAAAA,YAAY,EAAE,QAHV;AAIJC,IAAAA,cAAc,EAAE,KAJZ;AAKJC,IAAAA,MAAM,EAAE,OALJ;AAMJC,IAAAA,KAAK,EAAE,MANH;AAOJC,IAAAA,MAAM,EAAE;AAPJ,GADK;AAUXC,EAAAA,GAAG,EAAE;AACHH,IAAAA,MAAM,EAAE,KADL;AAEHC,IAAAA,KAAK,EAAE,MAFJ;AAGHC,IAAAA,MAAM,EAAE,MAHL;AAIHE,IAAAA,KAAK,EAAE,eAJJ;AAKHC,IAAAA,QAAQ,EAAE;AALP;AAVM,CAAD,CADc,CAA5B;AA0BA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA2C;AACxD,QAAMC,OAAO,GAAGf,SAAS,EAAzB;;AAEA,QAAMgB,UAAU,GAAIC,IAAD,IAAgB;AACjC,UAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASF,IAAT,EAAeG,OAAf,EAApB;AACA,UAAMC,WAAW,GAAG,IAAIF,IAAJ,GAAWC,OAAX,EAApB;AACA,UAAME,MAAM,GAAG,EAAf;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,GAAG,GAAG,EAAZ;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAG,CAACR,WAAW,GAAGH,WAAf,IAA8B,IAAzC;;AACA,QAAIW,IAAI,IAAIP,MAAZ,EAAoB;AAClBM,MAAAA,OAAO,GAAG,QAAV;AACD,KAFD,MAEO,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAArB,EAA6B;AAClCI,MAAAA,OAAO,GAAGL,MAAV;AACAM,MAAAA,OAAO,GAAG,QAAV;AACD,KAHM,MAGA,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAAT,GAAkBC,IAA9B,EAAoC;AACzCG,MAAAA,OAAO,GAAGL,MAAM,GAAGC,MAAnB;AACAK,MAAAA,OAAO,GAAG,MAAV;AACD,KAHM,MAGA,IAAIC,IAAI,IAAI,MAAZ,EAAoB;AACzB,aAAO,WAAP;AACD,KAFM,MAEA;AACL,aAAQ,GAAEZ,IAAI,CAACa,QAAL,EAAgB,IAAGb,IAAI,CAACc,OAAL,EAAe,KAAId,IAAI,CAACe,WAAL,EAAmB,EAAnE;AACD;;AACDH,IAAAA,IAAI,IAAIF,OAAR;AACA,UAAMM,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWP,IAAX,CAAT,CAApB;AACA,UAAMQ,MAAM,GAAGJ,WAAW,GAAG,CAAd,GAAkB,GAAlB,GAAwB,EAAvC;AACA,UAAMK,WAAW,GAAI,GAAEL,WAAY,IAAGL,OAAQ,GAAES,MAAO,MAAvD;AACA,WAAOC,WAAP;AACD,GA7BD;;AA+BA,QAAMC,OAAiB,GAAG,CACxB;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiCjC,IAAAA,KAAK,EAAE;AAAxC,GADwB,EAExB;AAAEgC,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE,OAA9B;AAAuCjC,IAAAA,KAAK,EAAE;AAA9C,GAFwB,EAGxB;AAAEgC,IAAAA,KAAK,EAAE,WAAT;AAAsBC,IAAAA,UAAU,EAAE,cAAlC;AAAkDjC,IAAAA,KAAK,EAAE;AAAzD,GAHwB,EAIxB;AAAEgC,IAAAA,KAAK,EAAE,WAAT;AAAsBC,IAAAA,UAAU,EAAE,cAAlC;AAAkDjC,IAAAA,KAAK,EAAE;AAAzD,GAJwB,CAA1B,CAlCwD,CAyCxD;;AACA,QAAMkC,IAAI,GAAG5B,KAAK,CAAC6B,aAAN,CAAoBC,GAApB,CAAwB,CAACC,QAAD,EAAmBC,KAAnB,KAAqC;AACxE,WAAO;AACLC,MAAAA,EAAE,EAAED,KADC;AAELE,MAAAA,KAAK,EAAElC,KAAK,CAACmC,SAAN,CAAgBJ,QAAhB,EAA0BG,KAF5B;AAGLE,MAAAA,SAAS,EAAElC,UAAU,CAACF,KAAK,CAACmC,SAAN,CAAgBJ,QAAhB,EAA0BK,SAA3B,CAHhB;AAILC,MAAAA,SAAS,EAAEnC,UAAU,CAACF,KAAK,CAACmC,SAAN,CAAgBJ,QAAhB,EAA0BM,SAA3B;AAJhB,KAAP,CADwE,CAOxE;AACD,GARY,CAAb,CA1CwD,CAmDxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AAAK,IAAA,SAAS,EAAEpC,OAAO,CAACb,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,SAAS,EAAEa,OAAO,CAACL,GADrB;AAEE,IAAA,IAAI,EAAEgC,IAFR;AAGE,IAAA,OAAO,EAAEH,OAHX;AAIE,IAAA,QAAQ,EAAE,EAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAUD","sourcesContent":["import React from 'react';\nimport { DataGrid, ColDef, ValueGetterParams } from '@material-ui/data-grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport INotebook from './interfaces/inotebook';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyItems: 'center',\n      flexDdirection: 'row',\n      height: '100vh',\n      width: '100%',\n      margin: 'auto',\n    },\n    box: {\n      height: '90%',\n      width: '100%',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '14px',\n    },\n  })\n);\n\ninterface INotebooksProps {\n  notebooks: INotebook;\n  notebookOrder: Array<string>;\n}\n\nexport default function Notebooks(props: INotebooksProps) {\n  const classes = useStyles();\n\n  const getTimeMsg = (date: Date) => {\n    const createdTime = new Date(date).valueOf();\n    const currentTime = new Date().valueOf();\n    const second = 60;\n    const minute = 60;\n    const hour = 24;\n    const day = 30;\n    const month = 12;\n    let divider = 1;\n    let timeMsg = '';\n    let diff = (currentTime - createdTime) / 1000;\n    if (diff <= second) {\n      timeMsg = 'second';\n    } else if (diff <= second * minute) {\n      divider = second;\n      timeMsg = 'minute';\n    } else if (diff <= second * minute * hour) {\n      divider = second * minute;\n      timeMsg = 'hour';\n    } else if (diff <= 172800) {\n      return 'Yesterday';\n    } else {\n      return `${date.getMonth()} ${date.getDate()}, ${date.getFullYear()}`;\n    }\n    diff /= divider;\n    const displayTime = Math.abs(Math.round(diff));\n    const plural = displayTime > 1 ? 's' : '';\n    const timeMessage = `${displayTime} ${timeMsg}${plural} ago`;\n    return timeMessage;\n  };\n\n  const columns: ColDef[] = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'title', headerName: 'Title', width: 250 },\n    { field: 'createdAt', headerName: 'Created Date', width: 300 },\n    { field: 'updatedAt', headerName: 'Updated Date', width: 300 },\n  ];\n\n  // const rows: Array = [];\n  const rows = props.notebookOrder.map((notebook: string, index: number) => {\n    return {\n      id: index,\n      title: props.notebooks[notebook].title,\n      createdAt: getTimeMsg(props.notebooks[notebook].createdAt),\n      updatedAt: getTimeMsg(props.notebooks[notebook].updatedAt),\n    };\n    // row.push(row);\n  });\n  // [\n  //   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  //   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  //   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  //   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  //   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  //   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  //   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  //   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  //   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  // ];\n\n  return (\n    <div className={classes.root}>\n      <DataGrid\n        className={classes.box}\n        rows={rows}\n        columns={columns}\n        pageSize={10}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}