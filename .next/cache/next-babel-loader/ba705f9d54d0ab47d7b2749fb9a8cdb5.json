{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { CgNotes } from 'react-icons/cg';\nimport { FaRegTrashAlt } from 'react-icons/fa';\nimport Divider from '@material-ui/core/Divider';\nimport NoteListItem from './note-list-item';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%'\n    },\n    title: {\n      padding: '10px 15px',\n      fontSize: '22px',\n      wordBreak: 'break-word'\n    },\n    noteCount: {\n      fontSize: '12px',\n      padding: '5px 15px',\n      color: 'rgb(107,107,107)'\n    },\n    date: {\n      fontSize: '10px',\n      paddingLeft: '10px'\n    },\n    listBox: {\n      overflowY: 'scroll'\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px'\n    },\n    emptyIcon: {\n      fontSize: '75px'\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)'\n    }\n  });\n});\nexport default function NoteList(props) {\n  var classes = useStyles();\n\n  var convertTitle = function convertTitle(title, length) {\n    return title.length > length ? title.substring(0, length) + '...' : title;\n  };\n\n  var noteCount = props.notebooks[props.notebook].notes.length;\n  var notebookTitle = props.notebooks[props.notebook].title;\n  var notebookUpdatedAt = props.notebooks[props.notebook].updatedAt;\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.title\n  }, convertTitle(notebookTitle, 15)), __jsx(\"div\", {\n    className: classes.noteCount\n  }, \"\".concat(noteCount, \" note\").concat(noteCount > 1 ? 's' : ''), __jsx(\"span\", {\n    className: classes.date\n  }, 'Last edited on ', props.formatDate(notebookUpdatedAt))), __jsx(Divider, null), noteCount > 0 ? __jsx(\"div\", {\n    className: classes.listBox\n  }, props.notebooks[props.notebook].notes.map(function (note) {\n    return __jsx(\"div\", {\n      key: note.id\n    }, __jsx(NoteListItem, _extends({\n      note: note\n    }, props, {\n      convertTitle: convertTitle\n    })), __jsx(Divider, null));\n  })) : __jsx(\"div\", {\n    className: classes.empty\n  }, props.notebook === 'trash' ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.emptyIcon\n  }, __jsx(FaRegTrashAlt, null)), __jsx(\"div\", null, \"Trash is Empty\")) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.emptyIcon\n  }, __jsx(CgNotes, null)), __jsx(\"div\", null, \"It all begins with notes\"), __jsx(\"div\", null, \"Click the\", ' ', __jsx(\"span\", {\n    onClick: function onClick() {\n      return props.addNewNote('', '');\n    },\n    className: classes.newNoteText\n  }, \"+ New Note\"), ' ', \"button in the side bar to create note.\"))));\n}","map":null,"metadata":{},"sourceType":"module"}