{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { CgNotes } from 'react-icons/cg';\nimport Divider from '@material-ui/core/Divider';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    margin: 'auto',\n    color: 'rgb(51,51,51)',\n    fontSize: '16px',\n    width: '100%'\n  },\n  title: {\n    padding: '10px',\n    fontSize: '22px'\n  },\n  list: {\n    height: '100px',\n    cursor: 'pointer',\n    '&:active': {\n      height: '30px',\n      width: '100px'\n    }\n  },\n  listDragging: {\n    height: '100px',\n    border: '2px groove rgb(0,119,179)',\n    borderRadius: '5px'\n  },\n  content: {\n    padding: '20px',\n    height: '100px'\n  },\n  empty: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 'auto',\n    textAlign: 'center',\n    padding: '35px'\n  },\n  emptyIcon: {\n    fontSize: '75px'\n  },\n  newNoteText: {\n    cursor: 'pointer',\n    color: 'rgb(0,168,45)'\n  }\n}));\nexport default function NoteList(props) {\n  const {\n    0: mousePressed,\n    1: setMousePressed\n  } = useState(false);\n  const classes = useStyles();\n\n  const handleDragStart = (noteId, note) => {\n    const newNote = _objectSpread(_objectSpread({}, note), {}, {\n      dragging: true\n    });\n\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  const handleDragEnd = (noteId, note) => {\n    const newNote = _objectSpread(_objectSpread({}, note), {}, {\n      dragging: false\n    });\n\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"title\"), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), props.notebooks[props.notebook].notes.length > 0 ? __jsx(React.Fragment, null, props.notebooks[props.notebook].notes.map(note => {\n    return __jsx(\"div\", {\n      key: note.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, note.dragging ? __jsx(\"div\", {\n      onMouseUp: () => handleDragEnd(note.id, note),\n      onDragEnd: () => handleDragEnd(note.id, note),\n      className: classes.listDragging,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, note.noteTitle)) : __jsx(\"div\", {\n      onMouseDown: () => handleDragStart(note.id, note),\n      onDragStart: () => handleDragStart(note.id, note),\n      className: classes.list,\n      draggable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, note.noteTitle)), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }));\n  })) : __jsx(\"div\", {\n    className: classes.empty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.emptyIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(CgNotes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"It all begins with notes\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Click the\", ' ', __jsx(\"span\", {\n    onClick: () => props.addNewNote(),\n    className: classes.newNoteText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"+ New Note\"), ' ', \"button in the side bar to create note.\")));\n}","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list.tsx"],"names":["React","useState","createStyles","makeStyles","CgNotes","Divider","useStyles","theme","root","display","flexDirection","height","margin","color","fontSize","width","title","padding","list","cursor","listDragging","border","borderRadius","content","empty","alignItems","justifyContent","textAlign","emptyIcon","newNoteText","NoteList","props","mousePressed","setMousePressed","classes","handleDragStart","noteId","note","newNote","dragging","updateNote","notebook","handleDragEnd","notebooks","notes","length","map","id","noteTitle","addNewNote"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CgNotes } from 'react-icons/cg';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%',\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px',\n    },\n    list: {\n      height: '100px',\n      cursor: 'pointer',\n      '&:active': {\n        height: '30px',\n        width: '100px',\n      },\n    },\n    listDragging: {\n      height: '100px',\n      border: '2px groove rgb(0,119,179)',\n      borderRadius: '5px',\n    },\n    content: {\n      padding: '20px',\n      height: '100px',\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px',\n    },\n    emptyIcon: {\n      fontSize: '75px',\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)',\n    },\n  })\n);\nexport default function NoteList(props: any) {\n  const [mousePressed, setMousePressed] = useState(false);\n  const classes = useStyles();\n\n  const handleDragStart = (noteId: string, note: any) => {\n    const newNote = {\n      ...note,\n      dragging: true,\n    };\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  const handleDragEnd = (noteId: string, note: any) => {\n    const newNote = {\n      ...note,\n      dragging: false,\n    };\n    props.updateNote(props.notebook, noteId, newNote);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.title}>title</div>\n      <Divider />\n      {props.notebooks[props.notebook].notes.length > 0 ? (\n        <>\n          {props.notebooks[props.notebook].notes.map((note: any) => {\n            return (\n              <div key={note.id}>\n                {note.dragging ? (\n                  <div\n                    onMouseUp={() => handleDragEnd(note.id, note)}\n                    onDragEnd={() => handleDragEnd(note.id, note)}\n                    className={classes.listDragging}\n                  >\n                    <div className={classes.content}>{note.noteTitle}</div>\n                  </div>\n                ) : (\n                  <div\n                    onMouseDown={() => handleDragStart(note.id, note)}\n                    onDragStart={() => handleDragStart(note.id, note)}\n                    className={classes.list}\n                    draggable\n                  >\n                    <div className={classes.content}>{note.noteTitle}</div>\n                  </div>\n                )}\n                <Divider />\n              </div>\n            );\n          })}\n        </>\n      ) : (\n        <div className={classes.empty}>\n          <div className={classes.emptyIcon}>\n            <CgNotes />\n          </div>\n          <div>It all begins with notes</div>\n          <div>\n            Click the{' '}\n            <span\n              onClick={() => props.addNewNote()}\n              className={classes.newNoteText}\n            >\n              + New Note\n            </span>{' '}\n            button in the side bar to create note.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}