{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/notebooks.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyItems: 'center',\n      flexDdirection: 'row',\n      height: '100vh',\n      width: '100%',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px'\n    }\n  });\n});\nexport default function Notebooks(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var getTimeMsg = function getTimeMsg(updatedAt) {\n    var createdTime = new Date(updatedAt);\n    var currentTime = new Date();\n    var second = 60;\n    var minute = 60;\n    var hour = 24;\n    var day = 30;\n    var month = 12;\n    var divider = 1;\n    var timeMsg = '';\n    var diff = (currentTime - createdTime) / 1000;\n\n    if (diff <= second) {\n      timeMsg = 'second';\n    } else if (diff <= second * minute) {\n      divider = second;\n      timeMsg = 'minute';\n    } else if (diff <= second * minute * hour) {\n      divider = second * minute;\n      timeMsg = 'hour';\n    } else if (diff <= second * minute * hour * day) {\n      divider = second * minute * hour;\n      timeMsg = 'day';\n    } else if (diff <= second * minute * hour * day * month) {\n      divider = second * minute * hour * day;\n      timeMsg = 'month';\n    } else {\n      divider = second * minute * hour * day * month;\n      timeMsg = 'year';\n    }\n\n    diff /= divider;\n    var displayTime = Math.abs(Math.round(diff));\n    var plural = displayTime > 1 ? 's' : '';\n    var timeMessage = \"\".concat(displayTime, \" \").concat(timeMsg).concat(plural, \" ago\");\n    return timeMessage;\n  };\n\n  var columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'title',\n    headerName: 'Title',\n    width: 250\n  }, {\n    field: 'createdAt',\n    headerName: 'Created Date',\n    width: 300\n  }, {\n    field: 'updatedAt',\n    headerName: 'Updated Date',\n    width: 300\n  }]; // const rows: Array = [];\n\n  var rows = props.notebookOrder.map(function (notebook, index) {\n    return {\n      id: index,\n      title: props.notebooks[notebook].title,\n      createdAt: props.formatDate(props.notebooks[notebook].createdAt),\n      updatedAt: props.formatDate(props.notebooks[notebook].updatedAt)\n    }; // row.push(row);\n  }); // [\n  //   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  //   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  //   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  //   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  //   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  //   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  //   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  //   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  //   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  // ];\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(DataGrid, {\n    rows: rows,\n    columns: columns,\n    pageSize: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(Notebooks, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Notebooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notebooks\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/notebooks.tsx"],"names":["React","DataGrid","createStyles","makeStyles","useStyles","theme","root","display","alignItems","justifyItems","flexDdirection","height","width","margin","color","fontSize","Notebooks","props","classes","getTimeMsg","updatedAt","createdTime","Date","currentTime","second","minute","hour","day","month","divider","timeMsg","diff","displayTime","Math","abs","round","plural","timeMessage","columns","field","headerName","rows","notebookOrder","map","notebook","index","id","title","notebooks","createdAt","formatDate"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAoD,wBAApD;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAgD,0BAAhD;AAGA,IAAMC,SAAS,GAAGD,UAAU,CAAC,UAACE,KAAD;AAAA,SAC3BH,YAAY,CAAC;AACXI,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAE,MADL;AAEJC,MAAAA,UAAU,EAAE,QAFR;AAGJC,MAAAA,YAAY,EAAE,QAHV;AAIJC,MAAAA,cAAc,EAAE,KAJZ;AAKJC,MAAAA,MAAM,EAAE,OALJ;AAMJC,MAAAA,KAAK,EAAE,MANH;AAOJC,MAAAA,MAAM,EAAE,MAPJ;AAQJC,MAAAA,KAAK,EAAE,eARH;AASJC,MAAAA,QAAQ,EAAE;AATN;AADK,GAAD,CADe;AAAA,CAAD,CAA5B;AAqBA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA2C;AAAA;;AACxD,MAAMC,OAAO,GAAGd,SAAS,EAAzB;;AAEA,MAAMe,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAqB;AACtC,QAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASF,SAAT,CAApB;AACA,QAAMG,WAAW,GAAG,IAAID,IAAJ,EAApB;AACA,QAAME,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAG,CAACR,WAAW,GAAGF,WAAf,IAA8B,IAAzC;;AACA,QAAIU,IAAI,IAAIP,MAAZ,EAAoB;AAClBM,MAAAA,OAAO,GAAG,QAAV;AACD,KAFD,MAEO,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAArB,EAA6B;AAClCI,MAAAA,OAAO,GAAGL,MAAV;AACAM,MAAAA,OAAO,GAAG,QAAV;AACD,KAHM,MAGA,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAAT,GAAkBC,IAA9B,EAAoC;AACzCG,MAAAA,OAAO,GAAGL,MAAM,GAAGC,MAAnB;AACAK,MAAAA,OAAO,GAAG,MAAV;AACD,KAHM,MAGA,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAAT,GAAkBC,IAAlB,GAAyBC,GAArC,EAA0C;AAC/CE,MAAAA,OAAO,GAAGL,MAAM,GAAGC,MAAT,GAAkBC,IAA5B;AACAI,MAAAA,OAAO,GAAG,KAAV;AACD,KAHM,MAGA,IAAIC,IAAI,IAAIP,MAAM,GAAGC,MAAT,GAAkBC,IAAlB,GAAyBC,GAAzB,GAA+BC,KAA3C,EAAkD;AACvDC,MAAAA,OAAO,GAAGL,MAAM,GAAGC,MAAT,GAAkBC,IAAlB,GAAyBC,GAAnC;AACAG,MAAAA,OAAO,GAAG,OAAV;AACD,KAHM,MAGA;AACLD,MAAAA,OAAO,GAAGL,MAAM,GAAGC,MAAT,GAAkBC,IAAlB,GAAyBC,GAAzB,GAA+BC,KAAzC;AACAE,MAAAA,OAAO,GAAG,MAAV;AACD;;AACDC,IAAAA,IAAI,IAAIF,OAAR;AACA,QAAMG,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWJ,IAAX,CAAT,CAApB;AACA,QAAMK,MAAM,GAAGJ,WAAW,GAAG,CAAd,GAAkB,GAAlB,GAAwB,EAAvC;AACA,QAAMK,WAAW,aAAML,WAAN,cAAqBF,OAArB,SAA+BM,MAA/B,SAAjB;AACA,WAAOC,WAAP;AACD,GAlCD;;AAoCA,MAAMC,OAAiB,GAAG,CACxB;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiC5B,IAAAA,KAAK,EAAE;AAAxC,GADwB,EAExB;AAAE2B,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE,OAA9B;AAAuC5B,IAAAA,KAAK,EAAE;AAA9C,GAFwB,EAGxB;AAAE2B,IAAAA,KAAK,EAAE,WAAT;AAAsBC,IAAAA,UAAU,EAAE,cAAlC;AAAkD5B,IAAAA,KAAK,EAAE;AAAzD,GAHwB,EAIxB;AAAE2B,IAAAA,KAAK,EAAE,WAAT;AAAsBC,IAAAA,UAAU,EAAE,cAAlC;AAAkD5B,IAAAA,KAAK,EAAE;AAAzD,GAJwB,CAA1B,CAvCwD,CA8CxD;;AACA,MAAM6B,IAAI,GAAGxB,KAAK,CAACyB,aAAN,CAAoBC,GAApB,CAAwB,UAACC,QAAD,EAAmBC,KAAnB,EAAqC;AACxE,WAAO;AACLC,MAAAA,EAAE,EAAED,KADC;AAELE,MAAAA,KAAK,EAAE9B,KAAK,CAAC+B,SAAN,CAAgBJ,QAAhB,EAA0BG,KAF5B;AAGLE,MAAAA,SAAS,EAAEhC,KAAK,CAACiC,UAAN,CAAiBjC,KAAK,CAAC+B,SAAN,CAAgBJ,QAAhB,EAA0BK,SAA3C,CAHN;AAIL7B,MAAAA,SAAS,EAAEH,KAAK,CAACiC,UAAN,CAAiBjC,KAAK,CAAC+B,SAAN,CAAgBJ,QAAhB,EAA0BxB,SAA3C;AAJN,KAAP,CADwE,CAOxE;AACD,GARY,CAAb,CA/CwD,CAwDxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACZ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,IAAI,EAAEmC,IAAhB;AAAsB,IAAA,OAAO,EAAEH,OAA/B;AAAwC,IAAA,QAAQ,EAAE,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;GAzEuBtB,S;UACNZ,S;;;KADMY,S","sourcesContent":["import React from 'react';\nimport { DataGrid, ColDef, ValueGetterParams } from '@material-ui/data-grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport INotebook from './interfaces/inotebook';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyItems: 'center',\n      flexDdirection: 'row',\n      height: '100vh',\n      width: '100%',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n    },\n  })\n);\n\ninterface INotebooksProps {\n  notebooks: INotebook;\n  notebookOrder: Array<string>;\n}\n\nexport default function Notebooks(props: INotebooksProps) {\n  const classes = useStyles();\n\n  const getTimeMsg = (updatedAt: Date) => {\n    const createdTime = new Date(updatedAt);\n    const currentTime = new Date();\n    const second = 60;\n    const minute = 60;\n    const hour = 24;\n    const day = 30;\n    const month = 12;\n    let divider = 1;\n    let timeMsg = '';\n    let diff = (currentTime - createdTime) / 1000;\n    if (diff <= second) {\n      timeMsg = 'second';\n    } else if (diff <= second * minute) {\n      divider = second;\n      timeMsg = 'minute';\n    } else if (diff <= second * minute * hour) {\n      divider = second * minute;\n      timeMsg = 'hour';\n    } else if (diff <= second * minute * hour * day) {\n      divider = second * minute * hour;\n      timeMsg = 'day';\n    } else if (diff <= second * minute * hour * day * month) {\n      divider = second * minute * hour * day;\n      timeMsg = 'month';\n    } else {\n      divider = second * minute * hour * day * month;\n      timeMsg = 'year';\n    }\n    diff /= divider;\n    const displayTime = Math.abs(Math.round(diff));\n    const plural = displayTime > 1 ? 's' : '';\n    const timeMessage = `${displayTime} ${timeMsg}${plural} ago`;\n    return timeMessage;\n  };\n\n  const columns: ColDef[] = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'title', headerName: 'Title', width: 250 },\n    { field: 'createdAt', headerName: 'Created Date', width: 300 },\n    { field: 'updatedAt', headerName: 'Updated Date', width: 300 },\n  ];\n\n  // const rows: Array = [];\n  const rows = props.notebookOrder.map((notebook: string, index: number) => {\n    return {\n      id: index,\n      title: props.notebooks[notebook].title,\n      createdAt: props.formatDate(props.notebooks[notebook].createdAt),\n      updatedAt: props.formatDate(props.notebooks[notebook].updatedAt),\n    };\n    // row.push(row);\n  });\n  // [\n  //   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  //   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  //   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  //   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  //   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  //   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  //   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  //   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  //   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  // ];\n\n  return (\n    <div className={classes.root}>\n      <DataGrid rows={rows} columns={columns} pageSize={10} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}