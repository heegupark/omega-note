{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport arraySort from 'array-sort';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    margin: 'auto'\n  },\n  notebook: {\n    fontSize: '24px',\n    padding: '20px 30px'\n  },\n  paper: {\n    width: 800,\n    height: '100vh',\n    padding: '10px 30px'\n  },\n  table: {\n    width: '100%',\n    color: 'rgb(51,51,51)'\n  },\n  row: {\n    '&:hover': {\n      backgroundColor: 'lightgrey',\n      color: 'white'\n    }\n  },\n  arrow: {\n    padding: '0px 5px',\n    fontSize: '16px'\n  },\n  cell: {\n    cursor: 'pointer',\n    width: '25%'\n  }\n}));\nexport default function Notebooks(props) {\n  const classes = useStyles();\n  const {\n    0: category,\n    1: setCategory\n  } = useState('title');\n  const {\n    0: reverse,\n    1: setReverse\n  } = useState(false);\n\n  const getTimeMsg = date => {\n    const createdTime = new Date(date).valueOf();\n    const currentTime = new Date().valueOf();\n    const second = 60;\n    const minute = 60;\n    const hour = 24;\n    let divider = 1;\n    let timeMsg = '';\n    let diff = (currentTime - createdTime) / 1000;\n\n    if (diff <= second) {\n      timeMsg = 'second';\n    } else if (diff <= second * minute) {\n      divider = second;\n      timeMsg = 'minute';\n    } else if (diff <= second * minute * hour) {\n      divider = second * minute;\n      timeMsg = 'hour';\n    } else if (diff <= 172800) {\n      return 'Yesterday';\n    } else {\n      const dateArr = date.toString().split(' ');\n      return `${dateArr[1]} ${dateArr[2]}, ${dateArr[3]}`;\n    }\n\n    diff /= divider;\n    const displayTime = Math.abs(Math.round(diff));\n    const plural = displayTime > 1 ? 's' : '';\n    const timeMessage = `${displayTime} ${timeMsg}${plural} ago`;\n    return timeMessage;\n  };\n\n  const createData = (id, title, displayTitle, noteCount, createdAt, updatedAt) => {\n    return {\n      id,\n      title,\n      displayTitle,\n      noteCount,\n      createdAt,\n      updatedAt\n    };\n  };\n\n  const rows = props.notebookOrder.map(notebook => {\n    return createData(props.notebooks[notebook].id, props.notebooks[notebook].title.toLowerCase(), props.notebooks[notebook].title, props.notebooks[notebook].notes.length, getTimeMsg(props.notebooks[notebook].createdAt), getTimeMsg(props.notebooks[notebook].updatedAt));\n  });\n\n  const handleSort = cat => {\n    setCategory(cat);\n    setReverse(false);\n\n    if (cat === category) {\n      setReverse(!reverse);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.notebook\n  }, \"Notebooks\"), __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(TableContainer, {\n    component: Paper\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"customized table\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.cell,\n    onClick: () => handleSort('title')\n  }, \"Title\", category === 'title' && __jsx(\"span\", {\n    className: classes.arrow\n  }, reverse ? '↓' : '↑')), __jsx(TableCell, {\n    align: \"center\",\n    className: classes.cell,\n    onClick: () => handleSort('noteCount')\n  }, \"Number of Notes\", category === 'noteCount' && __jsx(\"span\", {\n    className: classes.arrow\n  }, reverse ? '↓' : '↑')), __jsx(TableCell, {\n    align: \"center\",\n    className: classes.cell,\n    onClick: () => handleSort('createdAt')\n  }, \"Created Date\", category === 'createdAt' && __jsx(\"span\", {\n    className: classes.arrow\n  }, reverse ? '↓' : '↑')), __jsx(TableCell, {\n    align: \"center\",\n    className: classes.cell,\n    onClick: () => handleSort('updatedAt')\n  }, \"Update Date\", category === 'updatedAt' && __jsx(\"span\", {\n    className: classes.arrow\n  }, reverse ? '↓' : '↑')))), __jsx(TableBody, null, arraySort(rows, category, {\n    reverse\n  }).map(row => __jsx(TableRow, {\n    key: row.id,\n    className: classes.row\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    onClick: () => props.handleNotebookClick(row.id),\n    style: {\n      cursor: 'pointer'\n    }\n  }, row.displayTitle), __jsx(TableCell, {\n    align: \"center\"\n  }, row.noteCount), __jsx(TableCell, {\n    align: \"center\"\n  }, row.createdAt), __jsx(TableCell, {\n    align: \"center\"\n  }, row.updatedAt))))))));\n}","map":null,"metadata":{},"sourceType":"module"}