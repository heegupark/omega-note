{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\nimport NoteRoundedIcon from '@material-ui/icons/NoteRounded';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\nimport SideBarItem from './sidebar-item';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { useDrop } from 'react-dnd';\nvar drawerWidth = 240;\nvar useStyles = makeStyles(function (theme) {\n  var _drawerClose;\n\n  return createStyles({\n    paper: {\n      padding: '5px'\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: 36\n    },\n    hide: {\n      display: 'none'\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: 'nowrap'\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      }),\n      backgroundColor: 'rgb(26,26,26)',\n      color: 'rgb(165,165,165)',\n      padding: '5px'\n    },\n    drawerClose: (_drawerClose = {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      overflowX: 'hidden',\n      width: theme.spacing(7) + 1\n    }, _defineProperty(_drawerClose, theme.breakpoints.up('sm'), {\n      width: theme.spacing(7) + 1\n    }), _defineProperty(_drawerClose, \"backgroundColor\", 'rgb(26,26,26)'), _defineProperty(_drawerClose, \"padding\", '5px 0px'), _drawerClose),\n    toolbar: _objectSpread({\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      padding: theme.spacing(0, 1)\n    }, theme.mixins.toolbar),\n    folder: {\n      padding: '0px 10px',\n      '&:hover': {\n        backgroundColor: 'rgb(51,51,51)',\n        borderRadius: '3px'\n      }\n    },\n    folderSelected: {\n      padding: '0px 10px',\n      backgroundColor: 'rgb(64,64,64)',\n      borderRadius: '3px',\n      '&:hover': {\n        backgroundColor: 'rgb(51,51,51)',\n        borderRadius: '3px'\n      }\n    },\n    listSelected: {\n      backgroundColor: 'rgb(64,64,64)',\n      borderRadius: '3px',\n      '&:hover': {\n        backgroundColor: 'rgb(51,51,51)',\n        borderRadius: '3px'\n      }\n    },\n    list: {\n      '&:hover': {\n        backgroundColor: 'rgb(51,51,51)',\n        borderRadius: '3px'\n      }\n    },\n    icon: {\n      minWidth: '40px',\n      color: 'rgb(165,165,165)'\n    },\n    iconMinimized: {\n      minWidth: '25px',\n      color: 'rgb(165,165,165)'\n    },\n    addNoteIcon: {\n      color: 'white'\n    },\n    addNotebookIcon: {\n      color: 'rgb(75,165,65)',\n      marginLeft: '30px'\n    },\n    addNote: {\n      backgroundColor: 'rgb(0,168,45)',\n      color: 'white',\n      borderRadius: '50px',\n      '&:hover': {\n        backgroundColor: 'rgb(0,143,38)'\n      },\n      padding: '8px',\n      margin: 'auto',\n      height: '40px'\n    },\n    newnotebook: {\n      width: '70%',\n      padding: '10px 0px',\n      height: '30px',\n      margin: '1px 0px',\n      outline: 'none',\n      color: 'rgb(165, 165, 165)',\n      border: 'none',\n      borderBottom: '1px solid rgb(165, 165, 165)',\n      backgroundColor: 'transparent',\n      fontWeight: 400,\n      fontSize: '1rem'\n    },\n    menuNotebookIcon: {\n      color: 'rgb(51,51,51)',\n      marginLeft: '30px'\n    }\n  });\n});\nexport default function Sidebar(props) {\n  var _clsx, _clsx2;\n\n  var classes = useStyles();\n\n  var _useState = useState(true),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      addNotebookButton = _useState2[0],\n      setAddNotebookButton = _useState2[1];\n\n  var _useState3 = useState(false),\n      addNotebook = _useState3[0],\n      setAddNotebook = _useState3[1];\n\n  var _useState4 = useState(''),\n      newNotebook = _useState4[0],\n      setNewNotebook = _useState4[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setOpen(!open);\n  };\n\n  var addNewNotebook = function addNewNotebook() {\n    setOpen(true);\n    setAddNotebook(true);\n  };\n\n  var handleAddNewNotebook = function handleAddNewNotebook(e) {\n    if (e.key === 'Enter' && newNotebook.length > 0) {\n      props.addNewNotebook('', newNotebook);\n      setAddNotebook(false);\n      setNewNotebook('');\n    }\n  };\n\n  var _useDrop = useDrop({\n    accept: 'note',\n    drop: function drop() {\n      return moveToTrash();\n    },\n    collect: function collect(monitor) {\n      return {\n        isOver: monitor.isOver(),\n        item: monitor.getItem()\n      };\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      _useDrop2$ = _useDrop2[0],\n      isOver = _useDrop2$.isOver,\n      item = _useDrop2$.item,\n      drop = _useDrop2[1];\n\n  var moveToTrash = function moveToTrash() {\n    props.moveNote(item === null || item === void 0 ? void 0 : item.notebook, 'trash', item === null || item === void 0 ? void 0 : item.id);\n  };\n\n  return __jsx(Drawer, {\n    variant: \"permanent\",\n    className: clsx(classes.drawer, (_clsx = {}, _defineProperty(_clsx, classes.drawerOpen, open), _defineProperty(_clsx, classes.drawerClose, !open), _clsx)),\n    classes: {\n      paper: clsx((_clsx2 = {}, _defineProperty(_clsx2, classes.drawerOpen, open), _defineProperty(_clsx2, classes.drawerClose, !open), _clsx2))\n    }\n  }, __jsx(List, null, __jsx(ListItem, {\n    key: \"o-note\"\n  }, __jsx(ListItemIcon, null, __jsx(\"img\", {\n    src: \"../../static/images/o-logo.png\",\n    style: {\n      width: '22px',\n      height: '22px'\n    }\n  })), __jsx(ListItemText, {\n    primary: \"o-note\"\n  }))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"add-note\",\n    disabled: props.notebook === 'trash',\n    className: classes.addNote,\n    style: {\n      width: open ? '85%' : '70%'\n    },\n    onClick: function onClick() {\n      if (props.notebook) {\n        props.addNewNote('', '');\n      } else {\n        addNewNotebook();\n      }\n    }\n  }, __jsx(ListItemIcon, {\n    style: {\n      minWidth: '35px'\n    }\n  }, __jsx(Tooltip, {\n    title: \"Click to add a note\",\n    arrow: true\n  }, __jsx(AddIcon, {\n    className: classes.addNoteIcon\n  }))), __jsx(Tooltip, {\n    title: \"Click to add a notebook\",\n    arrow: true\n  }, props.notebook ? __jsx(ListItemText, {\n    primary: open ? 'New Note' : ''\n  }) : __jsx(ListItemText, {\n    primary: open ? 'New Notebook' : ''\n  })))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"Notebooks\",\n    className: props.notebook === '' ? classes.folderSelected : classes.folder,\n    style: {\n      padding: open ? '0px 10px' : '0px 15px'\n    }\n  }, __jsx(ListItemIcon, null, __jsx(NoteRoundedIcon, {\n    className: open ? classes.icon : classes.iconMinimized,\n    onClick: function onClick() {\n      props.handleNotebookClick('');\n      props.setView('notebooks');\n    }\n  })), __jsx(ListItemText, {\n    primary: \"Notebooks\",\n    onClick: function onClick() {\n      props.handleNotebookClick('');\n      props.setView('notebooks');\n    }\n  }), __jsx(ListItemIcon, {\n    onClick: function onClick() {\n      addNewNotebook();\n    },\n    onMouseOver: function onMouseOver() {\n      return setAddNotebookButton(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setAddNotebookButton(false);\n    }\n  }, addNotebookButton && open ? __jsx(AddIcon, {\n    className: classes.addNotebookIcon\n  }) : __jsx(MoreHorizIcon, {\n    className: classes.menuNotebookIcon\n  }))), props.notebookOrder.length > 0 ? props.notebookOrder.map(function (notebook) {\n    return __jsx(SideBarItem, _extends({\n      key: notebook\n    }, props, {\n      thisNotebook: notebook,\n      open: open\n    }));\n  }) : '', addNotebook && __jsx(ListItem, {\n    style: {\n      padding: open ? '0px 0px 0px 30px' : '0px 15px'\n    }\n  }, __jsx(ListItemIcon, null, __jsx(ImportContactsIcon, {\n    className: open ? classes.icon : classes.iconMinimized\n  })), __jsx(\"input\", {\n    autoFocus: true,\n    value: newNotebook,\n    placeholder: \"New Notebook\",\n    className: classes.newnotebook,\n    onChange: function onChange(e) {\n      return setNewNotebook(e.target.value);\n    },\n    onKeyDown: function onKeyDown(e) {\n      handleAddNewNotebook(e);\n    },\n    onBlur: function onBlur() {\n      return setAddNotebook(false);\n    }\n  }))), __jsx(List, null, __jsx(ListItem, {\n    button: true,\n    key: \"Trash\",\n    className: props.notebook === 'trash' ? classes.folderSelected : classes.folder,\n    onClick: function onClick() {\n      return props.handleNotebookClick('trash');\n    },\n    style: {\n      padding: open ? '0px 10px' : '0px 15px',\n      backgroundColor: isOver ? 'rgb(249,56,0)' : '',\n      color: isOver ? 'white' : 'rgb(123,123,123)',\n      borderRadius: isOver ? '5px' : ''\n    },\n    ref: drop\n  }, __jsx(ListItemIcon, null, __jsx(DeleteOutlineRoundedIcon, {\n    className: open ? classes.icon : classes.iconMinimized\n  })), __jsx(ListItemText, {\n    primary: \"Trash\"\n  }))), __jsx(\"div\", {\n    className: classes.toolbar\n  }, __jsx(IconButton, {\n    onClick: handleDrawerToggle,\n    className: classes.icon\n  }, open ? __jsx(Tooltip, {\n    title: \"Click to close\",\n    arrow: true\n  }, __jsx(ChevronLeftIcon, null)) : __jsx(Tooltip, {\n    title: \"Click to open\",\n    arrow: true\n  }, __jsx(ChevronRightIcon, null)))));\n}","map":null,"metadata":{},"sourceType":"module"}