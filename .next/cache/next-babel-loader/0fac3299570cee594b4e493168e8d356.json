{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list-item.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useDrag, useDragLayer } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar layerStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%'\n};\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%'\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px'\n    },\n    box: {\n      position: 'sticky',\n      height: '100px',\n      cursor: 'pointer',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    noteTitle: {\n      padding: '10px 20px 0px 20px',\n      color: 'rgb(61,61,61)'\n    },\n    noteContent: {\n      padding: '5px 20px',\n      fontSize: '14px',\n      color: 'rgb(115,115,115)'\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px'\n    },\n    emptyIcon: {\n      fontSize: '75px'\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)'\n    }\n  });\n});\nexport default function NoteListItem(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var _useDrag = useDrag({\n    item: {\n      type: props.noteTitle\n    },\n    collect: function collect(monitor) {\n      return {\n        opacity: monitor.isDragging() ? 0.4 : 1,\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 3),\n      opacity = _useDrag2[0].opacity,\n      drag = _useDrag2[1],\n      preview = _useDrag2[2];\n\n  useEffect(function () {\n    preview(getEmptyImage(), {\n      captureDraggingState: true\n    });\n  }, []);\n\n  var getItemStyles = function getItemStyles(initialOffset, currentOffset, isSnapToGrid) {\n    if (!initialOffset || !currentOffset) {\n      return {\n        display: 'none'\n      };\n    }\n\n    var x = currentOffset.x,\n        y = currentOffset.y;\n\n    if (isSnapToGrid) {\n      x -= initialOffset.x;\n      y -= initialOffset.y; // [x, y] = snapToGrid(x, y);\n\n      x += initialOffset.x;\n      y += initialOffset.y;\n    }\n\n    var transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n    return {\n      transform: transform,\n      WebkitTransform: transform\n    };\n  };\n\n  var _useDragLayer = useDragLayer(function (monitor) {\n    return {\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      initialOffset: monitor.getInitialSourceClientOffset(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging()\n    };\n  }),\n      itemType = _useDragLayer.itemType,\n      isDragging = _useDragLayer.isDragging,\n      item = _useDragLayer.item,\n      initialOffset = _useDragLayer.initialOffset,\n      currentOffset = _useDragLayer.currentOffset;\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    ref: drag,\n    style: {\n      opacity: opacity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.noteTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, props.noteTitle), __jsx(\"div\", {\n    className: classes.noteContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, props.note))), __jsx(\"div\", {\n    style: layerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: getItemStyles(initialOffset, currentOffset, props.snapToGrid),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, props.noteTitle));\n}\n\n_s(NoteListItem, \"xNE7dXDKBzf8mU+A0Ln1GRS9K78=\", false, function () {\n  return [useStyles, useDrag, useDragLayer];\n});\n\n_c = NoteListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteListItem\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-note/components/note-list-item.tsx"],"names":["React","useEffect","createStyles","makeStyles","useDrag","useDragLayer","getEmptyImage","layerStyles","position","pointerEvents","zIndex","left","top","width","height","useStyles","theme","root","display","flexDirection","margin","color","fontSize","title","padding","box","cursor","noteTitle","noteContent","empty","alignItems","justifyContent","textAlign","emptyIcon","newNoteText","NoteListItem","props","classes","item","type","collect","monitor","opacity","isDragging","drag","preview","captureDraggingState","getItemStyles","initialOffset","currentOffset","isSnapToGrid","x","y","transform","WebkitTransform","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","note","snapToGrid"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { XYCoord, useDrag, useDragLayer, DragSourceMonitor } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      margin: 'auto',\n      color: 'rgb(51,51,51)',\n      fontSize: '16px',\n      width: '100%',\n    },\n    title: {\n      padding: '10px',\n      fontSize: '22px',\n    },\n    box: {\n      position: 'sticky',\n      height: '100px',\n      cursor: 'pointer',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    noteTitle: {\n      padding: '10px 20px 0px 20px',\n      color: 'rgb(61,61,61)',\n    },\n    noteContent: {\n      padding: '5px 20px',\n      fontSize: '14px',\n      color: 'rgb(115,115,115)',\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: '35px',\n    },\n    emptyIcon: {\n      fontSize: '75px',\n    },\n    newNoteText: {\n      cursor: 'pointer',\n      color: 'rgb(0,168,45)',\n    },\n  })\n);\n\nexport default function NoteListItem(props: any) {\n  const classes = useStyles();\n\n  const [{ opacity }, drag, preview] = useDrag({\n    item: { type: props.noteTitle },\n    collect: (monitor: DragSourceMonitor) => ({\n      opacity: monitor.isDragging() ? 0.4 : 1,\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, []);\n\n  const getItemStyles = (\n    initialOffset: XYCoord | null,\n    currentOffset: XYCoord | null,\n    isSnapToGrid: boolean\n  ) => {\n    if (!initialOffset || !currentOffset) {\n      return {\n        display: 'none',\n      };\n    }\n\n    let { x, y } = currentOffset;\n\n    if (isSnapToGrid) {\n      x -= initialOffset.x;\n      y -= initialOffset.y;\n      // [x, y] = snapToGrid(x, y);\n      x += initialOffset.x;\n      y += initialOffset.y;\n    }\n\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n      transform,\n      WebkitTransform: transform,\n    };\n  };\n\n  const {\n    itemType,\n    isDragging,\n    item,\n    initialOffset,\n    currentOffset,\n  } = useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  return (\n    <>\n      <div className={classes.box}>\n        <div ref={drag} style={{ opacity }}>\n          <div className={classes.noteTitle}>{props.noteTitle}</div>\n          <div className={classes.noteContent}>{props.note}</div>\n        </div>\n      </div>\n      <div style={layerStyles}></div>\n      <div\n        style={getItemStyles(initialOffset, currentOffset, props.snapToGrid)}\n      >\n        {props.noteTitle}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}